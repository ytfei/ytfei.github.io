---
layout: post
title: 基于Git的源码管理
categories: management git
tags: git
---

h1. 分枝模型

*Git* 的分枝没有特别的使用要求，但其于个人理解及应用方式，我把常用分枝做了如下定义：

- master := 产品分枝，每一次提交都可以认为一个产品发布。当变更被整合到 master 分枝后，我们一般会建立一个相应的标签。
- develop := 开发分枝，所有的新产品/功能开发都最终会先整合到这个分枝；当然，每个功能分枝最先也是从这里切出来的。
- feature branch := 功能性分枝，必需最先从 develop 分枝切出，开发完成后，也最终会整合到 develop 分枝。
- release branch := 
产品发布分枝，必需从 develop 分枝切出。和功能分枝的最大不同是，只有当 develop 分枝趋于稳定，且有明确的发布版本计划时，才切出这样的分枝。其用途是为了在发布之前的微调和Bugfix。

该分枝的开发工作结束后，将会分别整合进 master 和 develop 分枝。 =:
- hotfix branch := 
补丁分枝。该分枝通常源于 tags 或者 master 。和 release 分枝相似，它最终也可能预示着一个新的版本，因此它也会包含版本变更；不同之处在于， hotfix 通常都是计划之外的。

当该分枝的开发工作结束后（问题被解决），它会被整合到 master 和 develop 分枝，同时我们也要更新版本号，建立新的标签。 =:

在这个模型中， master 和 develop 两个分枝会长期存在，其它分枝的生命周期则相对有限。

h1. 开发流程

h2. 功能分枝初始

# 功能分枝首先从 develop 分枝切出；
# 开发过程中，需要与经常从 develop 分枝拉出更新内容 （最好用 rebase ）； 
# 功能开发完成后，整合进 develop 分枝，然后删掉功能分枝。

在这里，需要理清，是否将功能分枝发布至 origin 服务器？团队成员之间如何来协同完成一个大的功能的呢？
rebase 是否会因为被发布至 origin 服务器，而导致很多不必要的 merge 点？

h1. 模型缺陷

h2. 多版本的平行开发及维护

如果有多个版本并行开发，而不是只有一个 master 主分枝；而且多个版本之间的功能特性并分完全一致，如，功能A只存在于1.2的版本，在2.0中不存在。

上述的模型，简单地假设了多个版本之间向前的演进关系，它认为新版本一定是旧版本的超集。但事实上，这是各假设太乐观。如果老版本与新版本有同样的根源，却在使用过程中有不同的功能特性，当如何管理呢？
有些补丁可能同时适用于新老版本，有些补丁则可以只适用于其中一个，如何来界定呢？
